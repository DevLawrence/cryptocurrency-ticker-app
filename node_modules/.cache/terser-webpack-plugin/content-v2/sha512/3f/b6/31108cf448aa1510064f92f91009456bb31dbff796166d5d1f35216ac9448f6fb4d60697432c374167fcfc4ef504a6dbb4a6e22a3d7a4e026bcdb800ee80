{"map":"{\"version\":3,\"sources\":[\"C:\\\\Users\\\\lkyalo\\\\cryptocurrency-ticker-app\\\\src\\\\components\\\\Cryptocurrency.js\",\"C:\\\\Users\\\\lkyalo\\\\cryptocurrency-ticker-app\\\\src\\\\components\\\\Tickers.js\",\"C:\\\\Users\\\\lkyalo\\\\cryptocurrency-ticker-app\\\\src\\\\App.js\",\"C:\\\\Users\\\\lkyalo\\\\cryptocurrency-ticker-app\\\\src\\\\serviceWorker.js\",\"C:\\\\Users\\\\lkyalo\\\\cryptocurrency-ticker-app\\\\src\\\\index.js\"],\"names\":[\"Cryptocurrency\",\"_this$props$data\",\"this\",\"props\",\"data\",\"id\",\"name\",\"symbol\",\"price_usd\",\"percent_change_1h\",\"percent_change_24h\",\"percent_change_7d\",\"react_default\",\"a\",\"createElement\",\"className\",\"toFixed\",\"Component\",\"Tickers\",\"_this\",\"Object\",\"classCallCheck\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"state\",\"_this2\",\"fetchCryptocurrencyData\",\"interval\",\"setInterval\",\"_this3\",\"axios\",\"get\",\"then\",\"response\",\"wanted\",\"result\",\"filter\",\"currency\",\"includes\",\"setState\",\"catch\",\"err\",\"console\",\"log\",\"tickers\",\"map\",\"src_components_Cryptocurrency\",\"key\",\"App\",\"src_components_Tickers\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"registration\",\"unregister\"],\"mappings\":\"iUA0BeA,gMArBL,IAAAC,EAQJC,KAAKC,MAAMC,KAPXC,EADIJ,EACJI,GACHC,EAFOL,EAEPK,KACAC,EAHON,EAGPM,OACAC,EAJOP,EAIPO,UACAC,EALOR,EAKPQ,kBACAC,EANOT,EAMPS,mBACAC,EAPOV,EAOPU,kBAED,OACCC,EAAAC,EAAAC,cAAA,KAAA,CAAIC,UAAW,iBAAmBV,GACjCO,EAAAC,EAAAC,cAAA,IAAA,CAAGC,UAAU,uBAAb,IAAqCT,EAArC,KAA6CC,EAA7C,MACAK,EAAAC,EAAAC,cAAA,KAAA,KAAA,OAAUN,GAAWQ,QAAQ,GAA7B,KACAJ,EAAAC,EAAAC,cAAA,IAAA,KAAA,IAAKL,EAAL,UACAG,EAAAC,EAAAC,cAAA,IAAA,KAAA,IAAKJ,EAAL,YACAE,EAAAC,EAAAC,cAAA,IAAA,KAAA,IAAKH,EAAL,oBAjByBM,EAAAA,YCwEdC,cAnEd,SAAAA,EAAYf,GAAO,IAAAgB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAlB,KAAAgB,IAClBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAlB,KAAAkB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAtB,KAAMC,KACDsB,MAAQ,CACZrB,KAAM,CACL,CACCC,GAAI,UACJC,KAAM,UACNC,OAAQ,MACRC,UAAW,IACXC,kBAAmB,IACnBC,mBAAoB,IACpBC,kBAAmB,KAEpB,CACCN,GAAI,WACJC,KAAM,WACNC,OAAQ,MACRC,UAAW,IACXC,kBAAmB,IACnBC,mBAAoB,IACpBC,kBAAmB,KAEpB,CACCN,GAAI,WACJC,KAAM,WACNC,OAAQ,MACRC,UAAW,IACXC,kBAAmB,IACnBC,mBAAoB,IACpBC,kBAAmB,OA7BJQ,mFAoCC,IAAAO,EAAAxB,KACnBA,KAAKyB,0BACLzB,KAAK0B,SAAWC,YAAY,WAAA,OAAMH,EAAKC,2BAA2B,uDAGzC,IAAAG,EAAA5B,KACzB6B,EAAAA,EAAMC,IAAI,qDACTC,KAAK,SAAAC,GACL,IAAIC,EAAS,CAAC,UAAW,WAAY,YACjCC,EAASF,EAAS9B,KAAKiC,OAAO,SAAAC,GAAQ,OAAIH,EAAOI,SAASD,EAASjC,MACvEyB,EAAKU,SAAS,CAAEpC,KAAMgC,MAEtBK,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,sCAI3B,IAAIG,EAAU3C,KAAKuB,MAAMrB,KAAK0C,IAAI,SAACR,GAAD,OAChC1B,EAAAC,EAAAC,cAAEiC,EAAF,CAAiB3C,KAAMkC,EAAUU,IAAKV,EAASjC,OAGhD,OACCO,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,qBACdH,EAAAC,EAAAC,cAAA,KAAA,CAAIC,UAAU,WAAd,IAA0B8B,EAA1B,KACAjC,EAAAC,EAAAC,cAAA,IAAA,KAAA,iDAAiDF,EAAAC,EAAAC,cAAA,IAAA,KAAA,uBAAjD,aA7DkBG,EAAAA,WCWPgC,mLAXX,OACIrC,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,KAAA,KAAA,4BAEAF,EAAAC,EAAAC,cAACoC,EAAD,cAPMjC,EAAAA,WCQEkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,EAAAA,EAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC\",\"sourcesContent\":[\"import React, { Component } from 'react';\\r\\nimport './Cryptocurrency.css';\\r\\n\\r\\nclass Cryptocurrency extends Component {\\r\\n\\r\\n\\trender() {\\r\\n\\t\\tvar{id,\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tsymbol,\\r\\n\\t\\t\\tprice_usd,\\r\\n\\t\\t\\tpercent_change_1h,\\r\\n\\t\\t\\tpercent_change_24h,\\r\\n\\t\\t\\tpercent_change_7d\\r\\n\\t\\t} = this.props.data;\\r\\n\\t\\treturn(\\r\\n\\t\\t\\t<li className={\\\"cryptocurrency\\\" + id}>\\r\\n\\t\\t\\t\\t<p className=\\\"cryptocurrency-name\\\"> {name} ({symbol}) </p>\\r\\n\\t\\t\\t\\t<h1> ${ (+price_usd).toFixed(2) } </h1>\\r\\n\\t\\t\\t\\t<p> {percent_change_1h}% 1hr </p>\\r\\n\\t\\t\\t\\t<p> {percent_change_24h}% 24hrs </p>\\r\\n\\t\\t\\t\\t<p> {percent_change_7d}% 7days </p>\\r\\n\\t\\t\\t</li>\\r\\n\\t\\t\\t);\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport default Cryptocurrency;\",\"import React, { Component } from 'react';\\r\\nimport axios from 'axios';\\r\\nimport './Tickers.css';\\r\\nimport Cryptocurrency from './Cryptocurrency';\\r\\n\\r\\n\\r\\nclass Tickers extends Component{\\r\\n\\r\\n\\tconstructor(props) {\\r\\n\\t\\tsuper(props);\\r\\n\\t\\tthis.state = {\\r\\n\\t\\t\\tdata: [\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\tid: \\\"bitcoin\\\",\\r\\n\\t\\t\\t\\t\\tname: \\\"Bitcoin\\\",\\r\\n\\t\\t\\t\\t\\tsymbol: \\\"BTC\\\",\\r\\n\\t\\t\\t\\t\\tprice_usd: \\\"1\\\",\\r\\n\\t\\t\\t\\t\\tpercent_change_1h: \\\"0\\\",\\r\\n\\t\\t\\t\\t\\tpercent_change_24h: \\\"0\\\",\\r\\n\\t\\t\\t\\t\\tpercent_change_7d: \\\"0\\\",\\r\\n\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\tid: \\\"ethereum\\\",\\r\\n\\t\\t\\t\\t\\tname: \\\"Ethereum\\\",\\r\\n\\t\\t\\t\\t\\tsymbol: \\\"ETH\\\",\\r\\n\\t\\t\\t\\t\\tprice_usd: \\\"1\\\",\\r\\n\\t\\t\\t\\t\\tpercent_change_1h: \\\"0\\\",\\r\\n\\t\\t\\t\\t\\tpercent_change_24h: \\\"0\\\",\\r\\n\\t\\t\\t\\t\\tpercent_change_7d: \\\"0\\\",\\r\\n\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\tid: \\\"litecoin\\\",\\r\\n\\t\\t\\t\\t\\tname: \\\"Litecoin\\\",\\r\\n\\t\\t\\t\\t\\tsymbol: \\\"LTC\\\",\\r\\n\\t\\t\\t\\t\\tprice_usd: \\\"1\\\",\\r\\n\\t\\t\\t\\t\\tpercent_change_1h: \\\"0\\\",\\r\\n\\t\\t\\t\\t\\tpercent_change_24h: \\\"0\\\",\\r\\n\\t\\t\\t\\t\\tpercent_change_7d: \\\"0\\\",\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t]\\r\\n\\t\\t};\\r\\n\\t}\\r\\n\\r\\n\\tcomponentDidMount() {\\r\\n\\t\\tthis.fetchCryptocurrencyData();\\r\\n\\t\\tthis.interval = setInterval(() => this.fetchCryptocurrencyData(), 60 * 1000);\\r\\n\\t}\\r\\n\\r\\n\\tfetchCryptocurrencyData() {\\r\\n\\t\\taxios.get(\\\"https://api.coinmarketcap.com/v1/ticker/?limit=10\\\")\\r\\n\\t\\t.then(response => {\\r\\n\\t\\t\\tvar wanted = [\\\"bitcoin\\\", \\\"ethereum\\\", \\\"litecoin\\\"];\\r\\n\\t\\t\\tvar result = response.data.filter(currency => wanted.includes(currency.id));\\r\\n\\t\\t\\tthis.setState({ data: result });\\r\\n\\t\\t})\\r\\n\\t\\t.catch(err => console.log(err));\\r\\n\\t}\\r\\n\\r\\n\\trender(){\\r\\n\\tvar tickers = this.state.data.map((currency) =>\\r\\n\\t\\t\\t< Cryptocurrency data={currency} key={currency.id} />\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\treturn (\\r\\n\\t\\t\\t<div className=\\\"tickers-container\\\">\\r\\n\\t\\t\\t\\t<ul className=\\\"tickers\\\"> {tickers} </ul>\\r\\n\\t\\t\\t\\t<p> Information updated every minute courtesy of <b> coinmarketcap.com </b> </p>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t);\\r\\n}\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\nexport default Tickers;\",\"import React, { Component } from 'react';\\nimport './App.css';\\nimport Tickers from './components/Tickers.js'; \\n\\nclass App extends Component {\\n  render(){\\n    return(\\n        <div className=\\\"App\\\"> \\n          <div className=\\\"App-header\\\"> \\n            <h2> Cryptocurrency Ticker </h2>\\n          </div>\\n            <Tickers />\\n        </div>\\n      );\\n  }\\n}\\n\\nexport default App;\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{16:function(e,t,n){e.exports=n(45)},22:function(e,t,n){},23:function(e,t,n){},43:function(e,t,n){},44:function(e,t,n){},45:function(e,t,n){\"use strict\";n.r(t);var a=n(0),c=n.n(a),r=n(14),i=n.n(r),o=(n(22),n(2)),u=n(3),l=n(5),s=n(4),h=n(6),p=(n(23),n(15)),m=n.n(p),d=(n(43),n(44),function(e){function t(){return Object(o.a)(this,t),Object(l.a)(this,Object(s.a)(t).apply(this,arguments))}return Object(h.a)(t,e),Object(u.a)(t,[{key:\"render\",value:function(){var e=this.props.data,t=e.id,n=e.name,a=e.symbol,r=e.price_usd,i=e.percent_change_1h,o=e.percent_change_24h,u=e.percent_change_7d;return c.a.createElement(\"li\",{className:\"cryptocurrency\"+t},c.a.createElement(\"p\",{className:\"cryptocurrency-name\"},\" \",n,\" (\",a,\") \"),c.a.createElement(\"h1\",null,\" $\",(+r).toFixed(2),\" \"),c.a.createElement(\"p\",null,\" \",i,\"% 1hr \"),c.a.createElement(\"p\",null,\" \",o,\"% 24hrs \"),c.a.createElement(\"p\",null,\" \",u,\"% 7days \"))}}]),t}(a.Component)),f=function(e){function t(e){var n;return Object(o.a)(this,t),(n=Object(l.a)(this,Object(s.a)(t).call(this,e))).state={data:[{id:\"bitcoin\",name:\"Bitcoin\",symbol:\"BTC\",price_usd:\"1\",percent_change_1h:\"0\",percent_change_24h:\"0\",percent_change_7d:\"0\"},{id:\"ethereum\",name:\"Ethereum\",symbol:\"ETH\",price_usd:\"1\",percent_change_1h:\"0\",percent_change_24h:\"0\",percent_change_7d:\"0\"},{id:\"litecoin\",name:\"Litecoin\",symbol:\"LTC\",price_usd:\"1\",percent_change_1h:\"0\",percent_change_24h:\"0\",percent_change_7d:\"0\"}]},n}return Object(h.a)(t,e),Object(u.a)(t,[{key:\"componentDidMount\",value:function(){var e=this;this.fetchCryptocurrencyData(),this.interval=setInterval(function(){return e.fetchCryptocurrencyData()},6e4)}},{key:\"fetchCryptocurrencyData\",value:function(){var e=this;m.a.get(\"https://api.coinmarketcap.com/v1/ticker/?limit=10\").then(function(t){var n=[\"bitcoin\",\"ethereum\",\"litecoin\"],a=t.data.filter(function(e){return n.includes(e.id)});e.setState({data:a})}).catch(function(e){return console.log(e)})}},{key:\"render\",value:function(){var e=this.state.data.map(function(e){return c.a.createElement(d,{data:e,key:e.id})});return c.a.createElement(\"div\",{className:\"tickers-container\"},c.a.createElement(\"ul\",{className:\"tickers\"},\" \",e,\" \"),c.a.createElement(\"p\",null,\" Information updated every minute courtesy of \",c.a.createElement(\"b\",null,\" coinmarketcap.com \"),\" \"))}}]),t}(a.Component),y=function(e){function t(){return Object(o.a)(this,t),Object(l.a)(this,Object(s.a)(t).apply(this,arguments))}return Object(h.a)(t,e),Object(u.a)(t,[{key:\"render\",value:function(){return c.a.createElement(\"div\",{className:\"App\"},c.a.createElement(\"div\",{className:\"App-header\"},c.a.createElement(\"h2\",null,\" Cryptocurrency Ticker \")),c.a.createElement(f,null))}}]),t}(a.Component);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));i.a.render(c.a.createElement(y,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[16,1,2]]]);","extractedComments":[]}